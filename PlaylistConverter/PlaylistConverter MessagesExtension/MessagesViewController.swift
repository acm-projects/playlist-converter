//
//  MessagesViewController.swift
//  PlaylistConverter MessagesExtension
//
//  Created by Vignesh Vasan on 3/6/19.
//  Copyright Â© 2019 Vignesh Vasan. All rights reserved.
//

import UIKit
import Messages
import Foundation
import StoreKit
import MediaPlayer

class MessagesViewController: MSMessagesAppViewController {
    

    
    @IBOutlet weak var searchBar: UISearchBar!
    
    //@IBOutlet weak var tblView: UITableView!
    
    @IBOutlet weak var checkAuthorization: UIButton!
    
    @IBOutlet weak var searchSongs: UISearchBar!
    
    @IBAction func checkAuth(_ sender: UIButton) {
        
    }
    
    /// The instance of `AuthorizationManager` used for querying and requesting authorization status.
    //var authorizationManager: AuthorizationManager!
    
    /// The instance of `AuthorizationDataSource` that provides information for the `UITableView`.
   // var authorizationDataSource: AuthorizationDataSource!
    
    /// A boolean value representing if a `SKCloudServiceSetupViewController` was presented while the application was running.
    var didPresentCloudServiceSetup = false
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("Corn")
        // Do any additional setup after loading the view.
        //checkAuthorization.addTarget(<#T##target: Any?##Any?#>, action: <#T##Selector#>, for: <#T##UIControl.Event#>)
    
        
        checkAppleMusic()
        let appleMusic: AppleMusic = AppleMusic.init()
        
        appleMusic.createEmptyPlaylist()
       
    }
    
    
    
    func checkAppleMusic(){
        SKCloudServiceController.requestAuthorization({
            (status: SKCloudServiceAuthorizationStatus) in
            switch(status)
            {
            case .notDetermined:
                print("Access cannot be determined.")
            case .denied:
                print("Access denied.")
            case .restricted:
                print("Access restricted.")
            case .authorized:
                print("Access granted.")
            @unknown default:
                print("Error")
            }
        })
    }
    
    
    
    // MARK: - Conversation Handling
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    //need to use to trigger app
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        if((message.url) != nil){
            print(message.url ?? "Not here")
        }
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    
}

/*extension UIViewController: UISearchControllerDelegate{
    func sea
}*/
